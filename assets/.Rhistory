print(rs[[i]]$doi)
tryCatch({
doi <- rs[[i]]$doi
path <- paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep="")
f <- getURL(path, httpheader = c("X-ELS-APIKey" = "80a7454986241466e6f4abc519b26f49"), verbose = F)
data <- fromJSON(f)
ci <- as.character(round(as.numeric(data[[1]]$entry[[1]]$`citedby-count`), 0))
if(length(ci) > 0) rs[[i]]$citations <- ci
cites <- c(cites,rs[[i]]$citations)
message(paste0(rs[[i]]$title, ":", rs[[i]]$citations))
}, warning = function(w) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
}, error = function(e) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
})
}
}
cites <- as.numeric(cites)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i < cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
cites
cites <- as.numeric(cites)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
hindex
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
library(yaml)
library("RCurl")
library("rjson")
rs <- yaml.load_file("~/OneDrive - UCL/04_outcomes/websites/guillaumelobet.github.io/_data/publications.yml")
cites <- c()
for(i in 1:length(rs)){
rs[[i]]$citations <- '0'
if(length(rs[[i]]$doi) > 0){
print(rs[[i]]$doi)
tryCatch({
doi <- rs[[i]]$doi
path <- paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep="")
f <- getURL(path, httpheader = c("X-ELS-APIKey" = "80a7454986241466e6f4abc519b26f49"), verbose = F)
data <- fromJSON(f)
ci <- as.character(round(as.numeric(data[[1]]$entry[[1]]$`citedby-count`), 0))
if(length(ci) > 0) rs[[i]]$citations <- ci
cites <- c(cites,rs[[i]]$citations)
message(paste0(rs[[i]]$title, ":", rs[[i]]$citations))
}, warning = function(w) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
}, error = function(e) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
})
}
}
cites <- as.numeric(cites)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
library(yaml)
library("RCurl")
library("rjson")
rs <- yaml.load_file("~/OneDrive - UCL/04_outcomes/websites/guillaumelobet.github.io/_data/publications.yml")
cites <- c()
for(i in 1:length(rs)){
rs[[i]]$citations <- '0'
if(length(rs[[i]]$doi) > 0){
print(rs[[i]]$doi)
tryCatch({
doi <- rs[[i]]$doi
path <- paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep="")
f <- getURL(path, httpheader = c("X-ELS-APIKey" = "80a7454986241466e6f4abc519b26f49"), verbose = F)
data <- fromJSON(f)
ci <- as.character(round(as.numeric(data[[1]]$entry[[1]]$`citedby-count`), 0))
if(length(ci) > 0) rs[[i]]$citations <- ci
cites <- c(cites,rs[[i]]$citations)
message(paste0(rs[[i]]$title, ":", rs[[i]]$citations))
}, warning = function(w) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
}, error = function(e) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
})
}
}
cites <- as.numeric(cites)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i < cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
hindex
cites
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
library(yaml)
library("RCurl")
library("rjson")
rs <- yaml.load_file("~/OneDrive - UCL/04_outcomes/websites/guillaumelobet.github.io/_data/publications.yml")
cites <- c()
for(i in 1:length(rs)){
rs[[i]]$citations <- '0'
if(length(rs[[i]]$doi) > 0){
print(rs[[i]]$doi)
tryCatch({
doi <- rs[[i]]$doi
path <- paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep="")
f <- getURL(path, httpheader = c("X-ELS-APIKey" = "80a7454986241466e6f4abc519b26f49"), verbose = F)
data <- fromJSON(f)
ci <- as.character(round(as.numeric(data[[1]]$entry[[1]]$`citedby-count`), 0))
if(length(ci) > 0) rs[[i]]$citations <- ci
cites <- c(cites,rs[[i]]$citations)
message(paste0(rs[[i]]$title, ":", rs[[i]]$citations))
}, warning = function(w) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
}, error = function(e) {
message(paste("http://api.elsevier.com/content/search/index:SCOPUS?query=DOI(",doi,")&field=citedby-count", sep=""))
failed <- c(failed, pmid)
})
}
}
cites <- as.numeric(cites)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/OneDrive - UCL/04_outcomes//websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
rs[[1]]$hindex
path <- "~/Dropbox/Roots_and_the_Machine/"
ls <- list.files(path)
ls <- ls[grepl(".csv", ls)]
ls <- ls[!grepl("Hard", ls)]
rs <- NULL
for(l in ls){
rs <- rbind(rs, read.csv(paste0(path,l)))
}
rs <- rs[,-1]
length(unique(rs$image))
write.csv(rs, paste0(path,"all_descriptors.csv"))
library(scholar)
library(yaml)
library(stringdist)
auth <-"XHIe6wsAAAAJ"
profile <- get_profile(auth)
pubs <- get_publications(auth)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/publications.yml")
cites <- c()
match <- NULL
for(i in 2:length(rs)){
rs[[i]]$citations <- '0'
ti <- rs[[i]]$title
print(ti)
print(stringdist(ti, pubs$title))
index <- amatch(ti, pubs$title, maxDist = 10)
if(!is.na(index)){
match <- rbind(match, data.frame(source=rs[[i]]$title, target=pubs$title[index]))
rs[[i]]$citations <- pubs$cites[index]
cites <- c(cites,rs[[i]]$citations)
# message(paste0(rs[[i]]$title, " : ", rs[[i]]$citations))
}
}
cites <- round(as.numeric(cites))
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
rs[[1]]$hindex <- as.character(hindex)
rs[[1]]$citations <- as.character(sum(cites))
rs[[1]]$update <- format(Sys.time(), "%Y-%m-%d")
cat(as.yaml(rs,  indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/publications.yml",sep=""), sep='\n') # Create the input file for Archisimple
rs
rs[[1]]
library(RCurl)
library(XML)
library(yaml)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[2]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='good_reads:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[2]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
doc
xpathSApply(doc, "//meta[@property='good_reads:isbn']", xmlAttrs)
xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
plain.text[2]
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
plain.text[1]
plain.text <- xpathSApply(doc, "//meta[@property='good_reads:isbn']", xmlAttrs)
plain.text[2]
plain.text
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[1]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[2]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n') # Create the input file for Archisimple
# load packages
library(RCurl)
library(XML)
library(yaml)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[1]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[2]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n') # Create the input file for Archisimple
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding =  = "UTF-8")
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "UTF-8")
# load packages
library(RCurl)
library(XML)
library(yaml)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "UTF-8")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[1]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[2]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n') # Create the input file for Archisimple
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
plain.text[2]
plain.text[1]
ref= "2674261-la-belette"
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "UTF-8")
html
doc
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "UTF-8")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
doc
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue, )[1]
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue, )
doc
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "CE_LATIN1")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "ISO-8859-1")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "ISO-8859-1")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "UTF-8")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE, .encoding = "LATIN-1")
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
x <- "fa\xE7ile"
Encoding(x)
Encoding(x) <- "latin1"
x
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
Encoding(xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1])
Encoding(xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]) -> 'latin1'
xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
test <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
test
Encoding(test) -> "latin1"
test
Encoding(test) -> "UTF-8"
test
Encoding(test) -> "ISO-8859-1"
test
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$author
gsub("Ã¨", "è", rs[[i]]$author)
# load packages
library(RCurl)
library(XML)
library(yaml)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[1]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[1]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$author <- gsub("Ã¨", "è", rs[[i]]$author)
rs[[i]]$author <- gsub("Ã©", "é", rs[[i]]$author)
rs[[i]]$author <- gsub("Ã«", "ë", rs[[i]]$author)
rs[[i]]$title <- gsub("Ã¨", "è", rs[[i]]$title)
rs[[i]]$title <- gsub("Ã©", "é", rs[[i]]$title)
rs[[i]]$title <- gsub("Ã«", "ë", rs[[i]]$title)
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n', ) # Create the input file for Archisimple
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n') # Create the input file for Archisimple
# load packages
library(RCurl)
library(XML)
library(yaml)
rs <- yaml.load_file("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml")
for(i in 1:length(rs)){
print(rs[[i]]$goodread)
tryCatch({
ref <- rs[[i]]$goodread
# download html
html <- getURL(paste0('http://www.goodreads.com/book/show/', ref), followlocation = TRUE)
html <- readLines(tc <- textConnection(html)); close(tc)
doc = htmlTreeParse(html, useInternalNodes = TRUE)
# Get cover image
plain.text <- xpathSApply(doc, "//img[@id='coverImage']", xmlAttrs)
rs[[i]]$image <- plain.text[3]
# Get book title
plain.text <- xpathSApply(doc, "//meta[@property='og:title']", xmlAttrs)
rs[[i]]$title <- plain.text[1]
# Get ISBN
plain.text <- xpathSApply(doc, "//meta[@property='books:isbn']", xmlAttrs)
rs[[i]]$isbn <- plain.text[1]
# Get author
rs[[i]]$author <- xpathSApply(doc, "//a[@class='authorName']/span", xmlValue)[1]
rs[[i]]$author <- gsub("Ã¨", "è", rs[[i]]$author)
rs[[i]]$author <- gsub("Ã©", "é", rs[[i]]$author)
rs[[i]]$author <- gsub("Ã«", "ë", rs[[i]]$author)
rs[[i]]$author <- gsub("Ã", "E", rs[[i]]$author)
rs[[i]]$title <- gsub("Ã¨", "è", rs[[i]]$title)
rs[[i]]$title <- gsub("Ã©", "é", rs[[i]]$title)
rs[[i]]$title <- gsub("Ã«", "ë", rs[[i]]$title)
rs[[i]]$url <- paste0('http://www.goodreads.com/book/show/', ref)
message(rs[[i]]$title)
}, warning = function(w) {
message()
failed <- c(failed, pmid)
}, error = function(e) {
message()
failed <- c(failed, pmid)
})
}
cat(as.yaml(rs, precision = 3, indent = 3),
file=paste("~/Dropbox/science/outputs/websites/guillaumelobet.github.io/_data/book.yml",sep=""), sep='\n\n\n') # Create the input file for Archisimple
